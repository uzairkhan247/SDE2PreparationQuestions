/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        return mergesort(head);
    }
    public ListNode merge(ListNode head1,ListNode head2){
        
        ListNode dummy = new ListNode();
        ListNode temp = dummy;
        while(head1!=null && head2!=null){
            if(head1.val<=head2.val){
                dummy.next = head1;
                head1=head1.next;
            }else{
                dummy.next = head2;
                head2=head2.next;
            }
            dummy  = dummy.next;
        }
        dummy.next=head1!=null?head1:head2;
        return temp.next;
        
    }
    public ListNode mergesort(ListNode head){
        
        if(head==null || head.next==null)
            return head;
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = head;
        
        while(fast!=null && fast.next!=null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
         
        prev.next= null;
        
        ListNode first = mergesort(head);
        ListNode second = mergesort(slow);
        return merge(first,second);
        
    }
}
