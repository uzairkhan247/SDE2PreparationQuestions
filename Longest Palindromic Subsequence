class Solution {
    public int longestPalindromeSubseq(String s) {
        return  longestCommonSubsequence(s,new StringBuilder(s).reverse().toString());
    }
    int[][] dp;
    public int longestCommonSubsequence(String text1, String text2) {
        dp = new int[text1.length()][text2.length()];
        for(int[] arr : dp)
            Arrays.fill(arr,-1);
        return _longestCommonSubsequence(text1,text2,text1.length()-1,text2.length()-1);
    }
    public int _longestCommonSubsequence(String text1, String text2,int i,int j) {
        if(i < 0 || j<0)
            return 0;
        if( dp[i][j]!=-1)
            return  dp[i][j];
        if(text1.charAt(i)==text2.charAt(j))
            return dp[i][j] = 1 + _longestCommonSubsequence(text1,text2,i-1,j-1);
        else
            return  dp[i][j] = Math.max(_longestCommonSubsequence(text1,text2,i-1,j),
                           _longestCommonSubsequence(text1,text2,i,j-1));
    }
}
